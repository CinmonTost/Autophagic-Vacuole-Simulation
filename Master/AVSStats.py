# -*- coding: utf-8 -*-
import statistics
import statsmodels.api as sm
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.graphics.gofplots import qqplot_2samples
from tkinter import Tk
from tkinter.filedialog import askopenfilename

############################################################################################################
#   Eastern Michigan University
#   Backues Lab  
#   Author: Payton Dunning
#   Last Date Modified: May 3rd, 2021
#
#   Includes various statistical functions for analyzing body data generated by SliceStats.
############################################################################################################
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
############################################################################################################

def main(fileSelectOpt):
    print(">>Please select a statistical script to run from the following 3 options: ")
    print("[1]: Find average body size")
    print("[2]: Q-Q (quantile-quantile) plot")
    print("[3]: Perform KS (Kolmogorov-Smirnov test)")
    print("[4]: Violin Plot")
    print("[0]: Exit Script")
    
    userSelection = input()
    if(userSelection == "1"):
        findAverage(fileSelectOpt)
    elif(userSelection == "2"):
        qqPlot(fileSelectOpt)
    elif(userSelection == "3"):
        ksTest(fileSelectOpt)
    elif(userSelection == "4"):
        violinPlot(fileSelectOpt)
    elif(userSelection == "0"):
        raise SystemExit
    
def findAverage(fileSelectOpt):
    print(">>Select an option for file input:")
    print("[0]: Use default input file '../sliceData/sliceDefault.txt'")
    print("[1]: Use alternate input file.")
    userSelection = input()
    inputFile = "sliceData/sliceDefault.txt"
    
    if(userSelection == "1"):
        if(fileSelectOpt == True):
            print(">>Select an alternative input file:")
            print("(The file selection screen may appear BEHIND your current application)")
            Tk().withdraw()
            inputFile = askopenfilename()
        else:
            print(">>Please enter alternate input file name and path: ")
            inputFile = input()

    bodyCount = 0
    areaAverage = 0
    areaSum = 0
    bodyAreaArray = []
    largestArea = -1
    smallestArea = 1000000 #Should find a more systematic max value to use.
    
    data = pullData(inputFile)
    dataLength = len(data)
    
    
    for index in range(1, dataLength):
        currentBodyNum = data[index][1]
        currentArea = int(data[index][2])
        currentVolume = int(data[index][3])
        
        bodyAreaArray.append(currentArea)
        areaSum += currentArea
        bodyCount += 1
        
        if(currentArea < smallestArea):
            smallestArea = currentArea
        if(currentArea > largestArea):
            largestArea = currentArea
    
    areaAverage = (float(areaSum)) / (float(bodyCount))
    #Finds SAMPLE standard deviation of body data.
    stdDev = statistics.stdev(bodyAreaArray)
    
    print("\nAverage Body Slice Area = %d" %(areaAverage))
    print("\nLargest Body Slice Area = %d" %(largestArea))
    print("\nSmallest Body Slice Area = %d" %(smallestArea))
    print("\nStandard Deviation of data set = %d" %(stdDev))
    
def qqPlot(fileSelectOpt):
    print("\nQQ")
    print(">>Select an option for file input:")
    print("[0]: Use default input file '../sliceData/sliceDefault.txt'")
    print("[1]: Use alternate input file.")
    
    userSelection = input()
    inputFile = "sliceData/sliceDefault.txt"
    
    if(userSelection == "1"):
        if(fileSelectOpt == True):
            print(">>Select an alternative input file:")
            print("(The file selection screen may appear BEHIND your current application)")
            Tk().withdraw()
            inputFile = askopenfilename()
        else:
            print(">>Please enter alternate input file name and path: ")
            inputFile = input()
    
    
    data = pullData(inputFile)
    dataLength = len(data)
    bodyAreaArray = []
    
    for index in range(1, dataLength):
        currentBodyNum = data[index][1]
        currentArea = int(data[index][2])
        currentVolume = int(data[index][3])
        
        bodyAreaArray.append(currentArea)
    
    aArray = np.array(bodyAreaArray)
    bArray = np.random.normal(loc=8.0, scale=1.0, size=((dataLength-1)))
    
    #statsmodels.graphics.gofplots.qqplot_2samples(statsA, statsB, xlabel=None, ylabel=None)
    plotA = sm.ProbPlot(aArray)
    plotB = sm.ProbPlot(bArray)
    qqplot_2samples(plotA,plotB, line='r')
    
    plt.show()

#END OF qqPlot
def ksTest(fileSelectOpt):
    print("\nKS")

def violinPlot(fileSelectOpt):
    print(">>Select an option for file input:")
    print("[0]: Use default input file '../sliceData/sliceDefault.txt'")
    print("[1]: Use alternate input file.")
    userSelection = input()
    inputFile = "sliceData/sliceDefault.txt"
    
    if(userSelection == "1"):
        if(fileSelectOpt == True):
            print(">>Select an alternative input file:")
            print("(The file selection screen may appear BEHIND your current application)")
            Tk().withdraw()
            inputFile = askopenfilename()
        else:
            print(">>Please enter alternate input file name and path: ")
            inputFile = input()
        
    data = pullData(inputFile)
    dataLength = len(data)
    bodyAreaArray = []
    
    for index in range(1, dataLength):
        currentBodyNum = data[index][1]
        currentArea = int(data[index][2])
        currentVolume = int(data[index][3])
        
        bodyAreaArray.append(currentArea)
    
    fig=plt.figure()
    ax = fig.add_subplot(111)
    #TEMPORARY secondary dataset for testing purposes:
    bodyList2 = [5075, 6001, 3275, 4500, 2309, 2399, 2680, 2900, 3800, 5765]
    data = [bodyAreaArray, bodyList2]
    
    sm.graphics.violinplot(data, ax=ax, labels=["Simulated Data", "Test Data"])
    
    ax.set_xlabel("Data Sets")
    ax.set_ylabel("Body Area (units)")
    
def pullData(dataFile):
    inStream = open(dataFile, "r")
    inStreamLines = inStream.readlines()
    #An array of arrays, with each subarray containing a line of data from the input file.
    dataArray = []
    
    for line in inStreamLines:
        #dataLine = (line.split(",").strip())
        dataLine = (line.strip()).split(",")
        dataArray.append(dataLine)
        
    inStream.close()
    return dataArray
        
#main()